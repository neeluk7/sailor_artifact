(* ********************************************************************** *)
(* BSD 2-Clause License                                                   *)
(*                                                                        *)
(* Copyright (c) 2022 Alasdair Armstrong                                  *)
(*                                                                        *)
(* All rights reserved.                                                   *)
(*                                                                        *)
(* Redistribution and use in source and binary forms, with or without     *)
(* modification, are permitted provided that the following conditions are *)
(* met:                                                                   *)
(*                                                                        *)
(* 1. Redistributions of source code must retain the above copyright      *)
(* notice, this list of conditions and the following disclaimer.          *)
(*                                                                        *)
(* 2. Redistributions in binary form must reproduce the above copyright   *)
(* notice, this list of conditions and the following disclaimer in the    *)
(* documentation and/or other materials provided with the distribution.   *)
(*                                                                        *)
(* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    *)
(* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      *)
(* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  *)
(* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   *)
(* HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, *)
(* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       *)
(* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  *)
(* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  *)
(* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    *)
(* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  *)
(* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   *)
(* ********************************************************************** *)

relation trf-internal1
relation trf-internal2

declare trf(Event, Event): bool

assert forall ev1: Event, ev2: Event => trf(ev1, ev2) == (trf1-internal(ev1, ev2) | trf2-internal(ev1, ev2))

(* All translations read from at least one write *)
assert forall ev1: Event => T(ev1) --> (exists ev2: Event => trf(ev2, ev1))

let trfi = trf & int
let trfe = trf \ trfi

let tfr = (((trf^-1); co) \ id) & overlap-loc
let tfri = tfr & int
let tfre = tfr \ tfri

define write-translate-order(w1: Event, t: Event, w2: Event): bool =
    trf(w1, t) & trf(w2, t) & translated_before(t, addr_of(w1), addr_of(w2))
