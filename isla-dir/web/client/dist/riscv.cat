include "cos.cat"

accessor fence_kind: barrier_kind = .0

accessor F: bool = is sail_barrier

define is_fence(f: barrier_kind, ev: Event): bool =
  F(ev) & (fence_kind(ev) == f)

define Fence-r-r(ev: Event): bool = is_fence(Barrier_RISCV_r_r, ev)
define Fence-r-w(ev: Event): bool = is_fence(Barrier_RISCV_r_w, ev)
define Fence-r-rw(ev: Event): bool = is_fence(Barrier_RISCV_r_rw, ev)
define Fence-w-r(ev: Event): bool = is_fence(Barrier_RISCV_w_r, ev)
define Fence-w-w(ev: Event): bool = is_fence(Barrier_RISCV_w_w, ev)
define Fence-w-rw(ev: Event): bool = is_fence(Barrier_RISCV_w_rw, ev)
define Fence-rw-r(ev: Event): bool = is_fence(Barrier_RISCV_rw_r, ev)
define Fence-rw-w(ev: Event): bool = is_fence(Barrier_RISCV_rw_w, ev)
define Fence-rw-rw(ev: Event): bool = is_fence(Barrier_RISCV_rw_rw, ev)
define Fence-tso(ev: Event): bool = is_fence(Barrier_RISCV_tso, ev)

accessor ak_variety: Access_variety = .access_kind.match { AK_explicit => .variety, AK_arch => .variety, _ => default }
accessor ak_strength: Access_strength = .access_kind.match { AK_explicit => .strength, _ => default }

define A(ev: Event): bool = R(ev) & (ak_strength(ev) == AS_rel_or_acq)
define L(ev: Event): bool = W(ev) & (ak_strength(ev) == AS_rel_or_acq)
define X(ev: Event): bool = ak_variety(ev) == AV_exclusive

define RCsc(ev: Event): bool = (A(ev) | L(ev)) & X(ev)

(* RISC-V fences *)
let fence-r-r = [R]; (po & (_ * Fence-r-r)); po; [R]
let fence-r-w = [R]; (po & (_ * Fence-r-w)); po; [W]
let fence-r-rw = [R]; (po & (_ * Fence-r-rw)); po; [M]
let fence-w-r = [W]; (po & (_ * Fence-w-r)); po; [R]
let fence-w-w = [W]; (po & (_ * Fence-w-w)); po; [W]
let fence-w-rw = [W]; (po & (_ * Fence-w-rw)); po; [M]
let fence-rw-r = [M]; (po & (_ * Fence-rw-r)); po; [R]
let fence-rw-w = [M]; (po & (_ * Fence-rw-w)); po; [W]
let fence-rw-rw = [M]; (po & (_ * Fence-rw-rw)); po; [M]
let fence-tso =
  ([W]; (po & (_ * Fence-tso)); po; [W]) | ([R]; (po & (_ * Fence-tso)); po; [M])

let fence =
  fence-r-r | fence-r-w | fence-r-rw |
  fence-w-r | fence-w-w | fence-w-rw |
  fence-rw-r | fence-rw-w | fence-rw-rw |
  fence-tso

let po-loc-no-w = po-loc \ (po-loc?;[W];po-loc)
let rsw = rf^-1;rf

(*************)
(* ppo rules *)
(*************)

(* Overlapping-Address Orderings *)
let r1 = [M];po-loc;[W]
let r2 = ([R];po-loc-no-w;[R]) \ rsw
let r3 = [X];rfi;[R]
(* Explicit Synchronization *)
let r4 = fence
let r5 = [A];po;[M]
let r6 = [M];po;[L]
let r7 = [RCsc];po;[RCsc]
let r8 = rmw
(* Syntactic Dependencies *)
let r9 = [M];addr;[M]
let r10 = [M];data;[W]
let r11 = [M];ctrl;[W]
(* Pipeline Dependencies *)
let r12 = [M];(addr|data);[W];rfi;[R]
let r13 = [M];addr;[M];po;[W]

let ppo =
  r1
| r2
| r3
| r4
| r5
| r6
| r7
| r8
| r9
| r10
| r11
| r12
| r13

(**********)
(* Axioms *)
(**********)

(* Sc per location *)
acyclic co|rf|fr|po-loc as Coherence

(* Main model axiom *)
acyclic co|rfe|fr|ppo as Model

(* Atomicity axiom *)
empty rmw & (fre;coe) as Atomic
