include "cos.cat"

(* RISC-V fences *)
let fence.r.r = [R]; (po & (_ * Fence.r.r)); po; [R]
let fence.r.w = [R]; (po & (_ * Fence.r.w)); po; [W]
let fence.r.rw = [R]; (po & (_ * Fence.r.rw)); po; [M]
let fence.w.r = [W]; (po & (_ * Fence.w.r)); po; [R]
let fence.w.w = [W]; (po & (_ * Fence.w.w)); po; [W]
let fence.w.rw = [W]; (po & (_ * Fence.w.rw)); po; [M]
let fence.rw.r = [M]; (po & (_ * Fence.rw.r)); po; [R]
let fence.rw.w = [M]; (po & (_ * Fence.rw.w)); po; [W]
let fence.rw.rw = [M]; (po & (_ * Fence.rw.rw)); po; [M]
let fence.tso =
  ([W]; (po & (_ * Fence.tso)); po; [W]) | ([R]; (po & (_ * Fence.tso)); po; [M])

let fence = 
  fence.r.r | fence.r.w | fence.r.rw |
  fence.w.r | fence.w.w | fence.w.rw |
  fence.rw.r | fence.rw.w | fence.rw.rw |
  fence.tso

let po-loc-no-w = po-loc \ (po-loc?;[W];po-loc)
let rsw = rf^-1;rf
let RCsc = (A|L) & X

(*************)
(* ppo rules *)
(*************)

(* Overlapping-Address Orderings *)
let r1 = [M];po-loc;[W]
and r2 = ([R];po-loc-no-w;[R]) \ rsw
and r3 = [X];rfi;[R]
(* Explicit Synchronization *)
and r4 = fence
and r5 = [A];po;[M]
and r5amo = (amo^-1);[A];po;[M]
and r6 = [M];po;[L]
and r7 = [RCsc];po;[RCsc]
and r8 = rmw
(* Syntactic Dependencies *)
and r9 = [M];addr;[M]
and r10 = [M];data;[W]
and r11 = [M];ctrl;[W]
(* Pipeline Dependencies *)
and r12 = [M];(addr|data);[W];rfi;[R]
and r13 = [M];addr;[M];po;[W]

let ppo =
  r1
| r2
| r3
| r4
| r5
| r5amo
| r6
| r7
| r8
| r9
| r10
| r11
| r12
| r13

(**********)
(* Axioms *)
(**********)

(* Sc per location *)
acyclic co|rf|fr|po-loc as Coherence

(* Main model axiom *)
acyclic co|rfe|fr|ppo as Model

(* Atomicity axiom *)
empty rmw & (fre;coe) as Atomic
